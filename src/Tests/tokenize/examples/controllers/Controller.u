class Controller extends Base
{

    protected
        $Controller = null,
        $_view_folder = "app/gui/",
        $_controllers_dir = "app/controllers/gui/";

    /**
     * BaseController constructor.
     * @param array $data
     */
    public function __construct($data = [])
    {
        $this->setData($data);
    }


    protected function templateViewCall()
    {
        !is_array($data = $this->getData()) ?: extract($data);

        /** @noinspection PhpUndefinedFieldInspection */
        require_once "{$this->_view_folder}" . strtolower($this->controller_name) . "/{$this->view}.php";
    }

    protected function view()
    {
        // TODO base view caller for all the view request.

        /**TODO
         *
         * Should cover all the items that require a view i.e template class and all
         */
        !is_array($data = $this->getData()) ?: extract($data);

        /** @noinspection PhpUndefinedFieldInspection */
        require_once "{$this->_view_folder}" . strtolower($this->controller_name) . "/{$this->view}.php";
    }

    /**
     * @param $file
     * @param $loc
     * @return string
     */
    public static function staticFiles($file, $loc)
    {
        return DirectoryRouting::get($loc) . $file;
    }

    /**
     * @return string
     */
    public function __toString()
    {
        // TODO: Implement __toString() method.
        return get_class($this);
    }

    /**
     * @param $v
     */
    protected function error($v)
    {
        /** @noinspection PhpVoidFunctionResultUsedInspection */
        $this->pushData('error', $v);

    }


    /**TODO
     * Check if a controller exists or nit
     */
    protected function controllerExists()
    {
        return file_exists("{$this->_controllers_dir}{$this->controller_name}.php");
    }


    /**
     * @param $func
     * @param $args
     */
    public function __call($func, $args)
    {
        $this->view = $func;

        // check method exists and pass params if there are any.


        if (method_exists($this, $method = "___$func")) {
            ((($count = count($args)) > 0) ?
                ($count > 1 ? call_user_func_array([$this, $method], $args) : $this->$method($args[0])) : $this->$method());

            $this->templateViewCall();
        } else {
            !method_exists($this, $method = "_$func") ?: ((($count = count($args)) > 0) ?
                ($count > 1 ? call_user_func_array([$this, $method], $args) : $this->$method($args[0])) : $this->$method());

            $this->view();
        }


    }

}