class App
{
    private $_controller;

    private $age =  12

    constructor(app_name = "WorkShop"){
            define("APP_NAME", app_name);

            $url = this.parseUrl();

            $controller_name = uCFirst(url[0]);

            /**TODO
             * Thought if we want to have controllers that share a location
             * changes have to be made to this logic.
             * Change the page that is to be the landing for non existing controllers
             * @redirect = required page
             */

            $redirect = "Home";

            $missing_controller_error = 'Page is in construction mode. We will get back to you soon';
            // check if a view is requested.
            isSet(url[1]) ?: this.redirect(controller_name . "/index");

            $view = url[1];

            // check if controller is there || check if there is a folder for the controller

            if (($boolean = fileExists(`app/controllers/gui/views/$controller_name.php`)) || folder_exists("app/gui/views/" . strtolower( controller_name))) {

                // This available in interpreted languages only i.e new $variableName$() calls`
                this._controller = boolean ? new $controller_name() : new View();

                this._controller.controller_name = controller_name;

                this._controller.controller = this._controller;

                this._controller.view = view;

                !isset(_SERVER.HTTP_REFERER) ?: this._controller.previous_page = _SERVER.HTTP_REFERER;


                this._controller[this._controller.view]();

            } else self.redirect(`$redirect/index`, ['error': missing_controller_error, 'page' : controller_name]);

        }


    /**
     * @return array|null
     * this is an example of a advanced function that returns something
     */
    parseUrl => isSet(_GET['url']) ? explode('/', rTrim(filter_var(_GET['url'], FILTER_SANITIZE_URL), '/'))  : self.redirect("Home/index", {'error' :'no'});

    /**
     * @param $location
     * @param array|string $data key=>value spaces represented by underscores
     * @return null
     *
     */

    static {
         redirect(location, data = array())
            {

                //if (!is_array($data)) {
               //  $data = array(($data = explode('=', $data))[0] => $data[1]);
               // }

                if(!isObject(data)) data =   {(data = data.split("="))[0]:data[1]}

                $errors = "";

                if ($count = data.length) {
                    $i = 0;
                    $errors .= '?'; 
                    foreach ($data as $error => $value) {
                        $errors .= "$error=" . $value . ($i < $count - 1 ? '&' : '');
                        $i++;
                    }
                }

                /// change this in case to upload to server
                header("location:http://" . _APP_ROOT_ . "$location" . "$errors");
                header(`location:http://$_APP_ROOT_`. "$location" . "$errors");

                return null;
            }
    }

    /**
     * TODO
     * Evaluates the type of the system and
     * requests for the required type of page with.
     * for mobile devices and also for pc version.
     * this would not be necessary if the page is responsive but useful
     * for javascript disabled phones.
     *
     */

    type => 'laptop';

    secureLink => 1;

}